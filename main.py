import asyncio
import config
import re

from aiogram import Bot, Dispatcher, executor, types
from collections import defaultdict
from sqlighter import SQLighter

from crypto import Crypto

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
TOKEN = os.getenv("token")
bot = Bot(TOKEN)

dp = Dispatcher(bot)

db = SQLighter('new_db.db')
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑—É—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
first_cr = Crypto()
# –ü–æ—Ä—Ñ—Ç–µ–ª–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
custom_portfolio = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–µ
prev_prices = first_cr.get_list()
crypto_current = first_cr.get_list()


# –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
def make_lower(crypto_cur):
    for i in range(len(crypto_cur[0])):
        crypto_cur[0][i] = crypto_cur[0][i].lower()
    return crypto_cur


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º crypto_cur, –ø–∞—Ä—Å—è —Å–∞–π—Ç
def initialize(crypto_cur, lower):
    new_cr = Crypto()
    crypto_cur = new_cr.get_list()
    if lower:
        crypto_cur = make_lower(crypto_cur)
    return crypto_cur


# –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def process_message(message):
    msg = re.findall(r'.+', message)
    msg[0].replace(',', '.')
    return msg[0].replace(',', '.').split(' ')


# –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∂–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
def emoji_mes(result, message, index):
    if result[1][index] > prev_prices[1][index]:
        message += 'üìà' + '\n'
    elif result[1][index] < prev_prices[1][index]:
        message += 'üìâ' + '\n'
    else:
        message += 'üö¶' + '\n'
    return message


# –ü–µ—á–∞—Ç–∞–µ–º –≤—Å–µ –ø—Ä–æ –º–æ–Ω–µ—Ç—É,–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def print_coin(result, message, s, index):
    if db.is_subscribed(s[1], result[0][index].lower()):
        message += result[0][index] + ' - ' + result[1][index][1:] + '$'
        message = emoji_mes(result, message, index)
    return message


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=['start'])
async def subscribe(message: types.Message):
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–± –≤–µ—Ä—É—é—â–∏—Ö –≤ –∫–æ–¥! –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é ' +
                         '—Å–≤–æ–¥–∫—É –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –Ω–∞–ø–∏—à–∏—Ç–µ "/{cryptocurrency_name}", –Ω–∞–ø—Ä–∏–º–µ—Ä "/bitcoin". ' +
                         '–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Å–≤–æ–¥–∫–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É. ' +
                         '–ß—Ç–æ–±—ã –ó–ê–ü–£–°–¢–ò–¢–¨ —Å–≤–æ–π –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ñ—Ç–µ–ª—å, –Ω–∞–ø–∏—à–∏—Ç–µ /start_game {num in USD}. ' +
                         '–ö–æ–º–∞–Ω–¥–∞–º–∏ /buy, /sell –∏ /my_portfolio –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å–≤–æ–∏–º –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª–µ–º. ' +
                         '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /buy —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–∫—É–ø–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ USD. ' +
                         '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ /sell —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–∞–∂—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–∑–º–µ—Ä–µ USD' +
                         '(—Ä–∞–±–æ—Ç–∞—é—Ç –≤–∞–ª—é—Ç—ã –∏–∑ —Ç–æ–ø 100 coingecko).')


# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤–∞–ª—é—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥–∞–º
@dp.message_handler(commands=['bitcoin', 'xrp', 'ethereum', 'cardano', 'tether'])
async def subscribe_cryptocurrency(message: types.Message):
    if not db.subscriber_exists(message.from_user.id):
        db.add_subscriber(message.from_user.id)
    if not db.is_subscribed(message.from_user.id, message.text[1:]):
        db.update_cryptocurrency_subscription(message.from_user.id, message.text[1:], 1)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ " + message.text[1:])
    else:
        db.update_cryptocurrency_subscription(message.from_user.id, message.text[1:], 0)
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã —Å " + message.text[1:])


# –í—ã–≤–æ–¥ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
@dp.message_handler(commands=['my_portfolio'])
async def print_portfolio(message: types.Message):
    ans_message = ''
    total = 0
    global crypto_current
    crypto_current = initialize(crypto_current, True)
    # –ü—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –∏ –≤—ã–≤–æ–¥–∏–º –∫–æ–ª-–≤–æ USD, –ª–µ–∂–∞—â–∏—Ö –≤ –Ω–∏—Ö
    for coin_name, coin_amount in custom_portfolio[message.from_user.id].items():
        if coin_name != 'USD':
            index = crypto_current[0].index(coin_name)
            ans_message += coin_name
            ans_message += ': ' + ("{:.2f}".format(coin_amount *
                                                   float(crypto_current[1][index][1:].replace(',', '')))) + '$\n'
            total += coin_amount * float(crypto_current[1][index][1:].replace(',', ''))
        else:
            ans_message += 'USD: ' + ("{:.2f}".format(coin_amount)) + '$\n'
            total += coin_amount
    total = "{:.2f}".format(total)
    await message.answer(ans_message + 'Common: ' + total + '$')


# –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã
@dp.message_handler(commands=['buy'])
async def buy_portfolio(message: types.Message):
    msg_ar = process_message(message.text)
    global crypto_current
    crypto_current = initialize(crypto_current, True)
    if msg_ar[1].lower() in crypto_current[0]:
        index = crypto_current[0].index(msg_ar[1].lower())
        crypto_price = float(crypto_current[1][index][1:].replace(',', ''))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤
        if float(msg_ar[2]) > custom_portfolio[message.from_user.id]['USD']:
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USD')
        else:
            custom_portfolio[message.from_user.id][msg_ar[1].lower()] += float(msg_ar[2]) / crypto_price
            custom_portfolio[message.from_user.id]['USD'] -= float(msg_ar[2])
            await message.answer('–ú–æ–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∞')
    else:
        await message.answer('–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


# –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç
@dp.message_handler(commands=['sell'])
async def sell_portfolio(message: types.Message):
    msg_ar = process_message(message.text)
    global crypto_current
    crypto_current = initialize(crypto_current, True)
    if msg_ar[1].lower() in crypto_current[0]:
        index = crypto_current[0].index(msg_ar[1].lower())
        crypto_price = float(crypto_current[1][index][1:].replace(',', ''))
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–µ–≤
        if float(msg_ar[2]) > (custom_portfolio[message.from_user.id][msg_ar[1].lower()] * crypto_price):
            await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–ª—é—Ç—ã')
        else:
            if msg_ar[1].lower() not in custom_portfolio[message.from_user.id]:
                await message.answer('–í—ã –µ—â–µ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ —ç—Ç—É –º–æ–Ω–µ—Ç—É')
            else:
                custom_portfolio[message.from_user.id][msg_ar[1].lower()] -= float(msg_ar[2]) / crypto_price
                custom_portfolio[message.from_user.id]['USD'] += float(msg_ar[2])
                await message.answer('–ú–æ–Ω–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞')
    else:
        await message.answer('–í–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')


# –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
@dp.message_handler(commands=['start_game'])
async def start_portfolio(message: types.Message):
    msg_ar = process_message(message.text)
    if len(msg_ar) == 1:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: /{start_game 1000},'
                             ' –≥–¥–µ 1000 - –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –≤–ª–æ–∂–µ–Ω–∏–µ –≤ USD')
    else:
        custom_portfolio[message.from_user.id] = defaultdict(float)
        custom_portfolio[message.from_user.id]['USD'] = float(msg_ar[1])
        await message.answer('–ü–æ—Ä—Ç—Ñ–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /{my_portfolio}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –≤–∞–ª—é—Ç—ã
@dp.message_handler(commands=['check'])
async def check_value(message: types.Message):
    msg_ar = process_message(message.text)
    global crypto_current
    crypto_current = initialize(crypto_current, True)
    if msg_ar[1].lower() in crypto_current[0]:
        await message.answer('–¶–µ–Ω–∞ ' + msg_ar[1] + ' = ' +
                             crypto_current[1][crypto_current[0].index(msg_ar[1].lower())][1:] + '$')
    else:
        await message.answer('–î–∞–Ω–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ coingecko')


# –†–∞–±–æ—Ç–∞ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@dp.message_handler()
async def other_messages(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')


# –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
async def scheduled(wait_for):
    while True:
        await asyncio.sleep(wait_for)
        subscriptions = db.get_subscriptions()
        global prev_prices, crypto_current
        crypto_current = initialize(crypto_current, False)
        for s in subscriptions:
            message = ''
            coins = [crypto_current[0].index('Bitcoin'), crypto_current[0].index('Tether'),
                     crypto_current[0].index('Ethereum'), crypto_current[0].index('Cardano'),
                     crypto_current[0].index('XRP')]
            for coin in coins:
                message = print_coin(crypto_current, message, s, coin)
            if message:
                await bot.send_message(s[1], message, disable_notification=True)

        prev_prices = crypto_current


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(10))  # –ø–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º 120 —Å–µ–∫—É–Ω–¥ (–≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ç–µ—Å—Ç–∞)
    executor.start_polling(dp, skip_updates=True)
